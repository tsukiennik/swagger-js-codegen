/**
 * {{&summary}}
 * @method
 * @name {{&className}}#{{&methodName}}
{{#parameters}}
{{^isSingleton}} * @param {{=<% %>=}}{<%&type%>}<%={{ }}=%> {{&name}} - {{&description}}{{/isSingleton}}
{{/parameters}}
 * 
 */
 {{&className}}.prototype.{{&methodName}} = function(parameters, timeout, retries, reqOut){
    if(parameters === undefined) {
        parameters = {};
    }
    var deferred = {{#isNode}}Q{{/isNode}}{{^isNode}}$q{{/isNode}}.defer();
    
    var path = '{{&path}}';
    
    var body;
    var queryParameters = {};
    var headers = {};
    var form = {};
    var upload = null;

    {{#isSecure}}
        if (this.token.isQuery) {
            queryParameters[this.token.headerOrQueryName] = this.token.value;
        } else if (this.token.headerOrQueryName) {
            headers[this.token.headerOrQueryName] = this.token.value;    
        } else {
            headers['Authorization'] = 'Bearer ' + this.token.value;
        }
    {{/isSecure}}

    {{#parameters}}
       
        {{#isQueryParameter}}
            {{#isSingleton}}
                queryParameters['{{&name}}'] = '{{&singleton}}';
            {{/isSingleton}}
            {{^isSingleton}}
                {{#isPatternType}}
                    Object.keys(parameters).forEach(function(parameterName) {
                        if(new RegExp('{{&pattern}}').test(parameterName)){
                            queryParameters[parameterName] = parameters[parameterName];
                        }
                    });
                {{/isPatternType}}
                {{^isPatternType}}
                if(parameters['{{&name}}'] !== undefined){
                    queryParameters['{{&name}}'] = parameters['{{&name}}'];
                }
                {{/isPatternType}}
            {{/isSingleton}}
        {{/isQueryParameter}}
        
        {{#isPathParameter}}
            path = path.replace('{{=<% %>=}}{<%&name%>}<%={{ }}=%>', parameters['{{&name}}']);
        {{/isPathParameter}}
        
        {{#isHeaderParameter}}
            {{#isSingleton}}
                headers['{{&name}}'] = '{{&singleton}}';
            {{/isSingleton}}
            {{^isSingleton}}
                if(parameters['{{&name}}'] !== undefined){
                    headers['{{&name}}'] = parameters['{{&name}}'];
                }
            {{/isSingleton}}
        {{/isHeaderParameter}}
        
        {{#isBodyParameter}}
            if(parameters['{{&name}}'] !== undefined){
                body = parameters['{{&name}}'];
            }
        {{/isBodyParameter}}

         {{#isFormParameter}}
            {{#isSingleton}}
                form['{{&name}}'] = '{{&singleton}}';
            {{/isSingleton}}
            {{^isSingleton}}
                if(parameters['{{&name}}'] !== undefined){
                    if('{{&name}}' !== 'file'){
                        form['{{&name}}'] = parameters['{{&name}}'];
                    }
                    else {
                        upload = function() {
                            var filePath = pathLib.join(process.cwd(), parameters['{{&name}}']);
                            fs.createReadStream(filePath).pipe(request.post(domain + path));
                            var response = { response: { statusCode: 200 }, body: { uploaded: filePath } };
                            deferred.resolve(response); 
                            return deferred.promise;
                        }
                    }
                }
            {{/isSingleton}}
        {{/isFormParameter}}

        {{#required}}
        if(parameters['{{&name}}'] === undefined){
            deferred.reject(new Error('Missing required {{&paramType}} parameter: {{&name}}'));
            return deferred.promise;
        }
        {{/required}}
 
    {{/parameters}}
    
    if(parameters.$queryParameters) {
        Object.keys(parameters.$queryParameters)
        .forEach(function(parameterName){
            var parameter = parameters.$queryParameters[parameterName];
            queryParameters[parameterName] = parameter;
        });
    }

    {{> request}}
    
    return deferred.promise; 
 };
